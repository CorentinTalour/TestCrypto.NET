@page "/vault"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.Text.Json
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Nav
@inject TestCrytpoServer.Code.CryptoInterop CryptoJs

<h3>Mon Vault</h3>

@if (!IsOpen)
{
  <fieldset style="margin-bottom:1.25rem;">
    <legend>Créer un nouveau vault</legend>
    <div style="margin-bottom:.5rem;">
      <label>OwnerUserId</label><br />
      <input @bind="OwnerUserId" placeholder="ex: user-123" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe maître</label><br />
      <input id="mpCreate" type="password" placeholder="••••••••" />
    </div>
    <button @onclick="CreateAndOpenVault">Créer & Ouvrir</button>
  </fieldset>

  <fieldset style="margin-bottom:1rem;">
    <legend>Ouvrir un vault existant</legend>
    <div style="margin-bottom:.5rem;">
      <label>Vault Id</label><br />
      <input type="number" @bind="VaultId" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe maître</label><br />
      <input id="mpOpen" type="password" placeholder="••••••••" />
    </div>
    <button @onclick="OpenVault">Ouvrir</button>
  </fieldset>

  <div><em>@Status</em></div>
}
else
{
  <div style="margin:.5rem 0 1rem;">
    <strong>Vault @VaultId ouvert.</strong>
    <button style="margin-left:1rem" @onclick="CloseVault">Fermer</button>
  </div>

  <fieldset style="margin-bottom:1rem;">
    <legend>Ajouter une entrée</legend>
    <div style="margin-bottom:.5rem;">
      <label>Nom d’utilisateur</label><br />
      <input id="name" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe</label><br />
      <input id="pwd" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>URL</label><br />
      <input id="url" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Notes</label><br />
      <textarea id="notes" rows="3"></textarea>
    </div>
    <button @onclick="AddEntry">Chiffrer & Enregistrer</button>
  </fieldset>

  <h4>Entrées du vault (affichées côté client)</h4>
  <div id="vault-list"><em>Chargement…</em></div>

  <div><em>@Status</em></div>
}

@code {
  int VaultId;
  bool IsOpen = false;
  string Status = "";
  string OwnerUserId = "";

  async Task CreateAndOpenVault()
  {
    try
    {
      Status = "Création du vault…";

      // (1) Crée le vault côté API via le JS (envoie le MP clair au backend).
      var genObj = await CryptoJs.CreateVaultVerifierFromInputAsync("mpCreate", 600_000);
      var gen = (JsonElement)genObj;

      // Le backend peut renvoyer { id, vaultSaltB64, iterations } ou { vaultId, ... } selon ta version
      int newId = 0;
      if (gen.TryGetProperty("id", out var idProp)) newId = idProp.GetInt32();
      else if (gen.TryGetProperty("vaultId", out var vidProp)) newId = vidProp.GetInt32();
      else { Status = "Réponse API invalide: id/vaultId manquant."; return; }

      VaultId = newId;

      // (2) Ouvre immédiatement, côté client (pas de MP en C#)
      Status = "Vault créé. Ouverture…";
      var res = (JsonElement)await CryptoJs.OpenVaultFromInputAsync(VaultId, "mpCreate", 300_000);
      bool ok = res.TryGetProperty("ok", out var okProp) && okProp.GetBoolean();
      if (!ok)
      {
        Status = res.TryGetProperty("error", out var e) ? (e.GetString() ?? "Erreur") : "Erreur";
        return;
      }

      IsOpen = true;
      Status = "Vault ouvert. Chargement…";
      await InvokeAsync(StateHasChanged);
      await Task.Delay(50);
      await ReloadEntries();
    }
    catch (Exception ex)
    {
      Status = "ERR CreateAndOpenVault: " + ex.Message;
    }
  }

  async Task OpenVault()
  {
    try
    {
      Status = "Ouverture…";
      if (VaultId <= 0) { Status = "VaultId requis."; return; }

      var res = (JsonElement)await CryptoJs.OpenVaultFromInputAsync(VaultId, "mpOpen", 300_000);
      bool ok = res.TryGetProperty("ok", out var okProp) && okProp.GetBoolean();
      if (!ok) { Status = res.TryGetProperty("error", out var e) ? e.GetString() ?? "Erreur" : "Erreur"; return; }

      IsOpen = true;
      Status = "Vault ouvert. Chargement…";
      await InvokeAsync(StateHasChanged);
      await Task.Delay(50);
      await ReloadEntries();
    }
    catch (Exception ex) { Status = "ERR OpenVault: " + ex.Message; }
  }

  async Task ReloadEntries()
  {
    var http = HttpFactory.CreateClient();
    var records = await http.GetFromJsonAsync<JsonElement[]>($"{Nav.BaseUri}api/vaults/{VaultId}/entries");
    await CryptoJs.RenderVaultEntriesAsync(records!); // déchiffre & affiche côté client
    await CryptoJs.TouchVaultAsync(); // reset auto-lock timer
  }

  async Task AddEntry()
  {
    if (!IsOpen) { Status = "Vault fermé."; return; }

    var payload = await CryptoJs.EncryptEntryForOpenVaultAsync(); // chiffrage client
    var http = HttpFactory.CreateClient();
    var resp = await http.PostAsJsonAsync($"{Nav.BaseUri}api/vaults/{VaultId}/entries", payload);
    if (!resp.IsSuccessStatusCode) { Status = $"Erreur API: {(int)resp.StatusCode}"; return; }

    await CryptoJs.TouchVaultAsync();
    await ReloadEntries();
  }

  async Task CloseVault()
  {
    IsOpen = false;
    Status = "Vault fermé.";
    await CryptoJs.LockNowAsync(); // oublie la clé + vide la liste côté client
  }
}