@page "/vault"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.Text.Json
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject TestCrytpoServer.Code.CryptoInterop CryptoJs


<h3>Mon Vault</h3>

@if (!IsOpen)
{
  <fieldset style="margin-bottom:1.25rem;">
    <legend>Cr√©er un nouveau vault</legend>
    <div style="margin-bottom:.5rem;">
      <label>OwnerUserId</label><br />
      <input @bind="OwnerUserId" placeholder="ex: user-123" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe ma√Ætre</label><br />
      <input id="mpCreate" type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
    </div>
    <button @onclick="CreateAndOpenVault">Cr√©er & Ouvrir</button>
  </fieldset>

  <fieldset style="margin-bottom:1rem;">
    <legend>Ouvrir un vault existant</legend>
    <div style="margin-bottom:.5rem;">
      <label>Vault Id</label><br />
      <input type="number" @bind="VaultId" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe ma√Ætre</label><br />
      <input id="mpOpen" type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
    </div>
    <button @onclick="OpenVault">Ouvrir</button>
  </fieldset>

  <div><em>@Status</em></div>
}
else
{
  <div style="margin:.5rem 0 1rem;">
    <strong>Vault @VaultId ouvert.</strong>
    <button style="margin-left:1rem" @onclick="CloseVault">Fermer</button>
  </div>

  <fieldset style="margin-bottom:1rem;">
    <legend>Ajouter une entr√©e</legend>
    <div style="margin-bottom:.5rem;">
      <label>Nom d‚Äôutilisateur</label><br />
      <input id="name" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe</label><br />
      <input id="pwd" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>URL</label><br />
      <input id="url" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Notes</label><br />
      <textarea id="notes" rows="3"></textarea>
    </div>
    <button @onclick="AddEntry">Chiffrer & Enregistrer</button>
  </fieldset>

  <h4>Entr√©es du vault (affich√©es c√¥t√© client)</h4>
  <div id="vault-list"><em>Chargement‚Ä¶</em></div>

  <div><em>@Status</em></div>
}

@code {
  int VaultId;
  bool IsOpen = false;
  string Status = "";
  string OwnerUserId = "";

  async Task CreateAndOpenVault()
  {
    try
    {
      Status = "Cr√©ation du vault‚Ä¶";
      var mp = await JS.InvokeAsync<string>("eval", "document.getElementById('mpCreate')?.value || ''");
      if (string.IsNullOrWhiteSpace(OwnerUserId) || string.IsNullOrWhiteSpace(mp))
      { Status = "OwnerUserId et MP requis."; return; }

      var genObj = await CryptoJs.CreateVaultVerifierAsync(mp, 600_000);
      var gen = (JsonElement)genObj;
      string vaultSaltB64 = gen.GetProperty("vaultSaltB64").GetString()!;
      int iterations = gen.GetProperty("iterations").GetInt32();
      string verifierB64 = gen.GetProperty("verifierB64").GetString()!;

      var http = HttpFactory.CreateClient();
      var payload = new { ownerUserId = OwnerUserId, vaultSaltB64, iterations, verifierB64 };
      var resp = await http.PostAsJsonAsync($"{Nav.BaseUri}api/vaults", payload);
      if (!resp.IsSuccessStatusCode)
      { Status = $"Erreur API: {(int)resp.StatusCode} {resp.ReasonPhrase}"; return; }

      var body = await resp.Content.ReadFromJsonAsync<JsonElement>();
      VaultId = body.GetProperty("id").GetInt32();

      // Ouverture imm√©diate
      var res = (JsonElement)await CryptoJs.OpenVaultAsync(VaultId, mp);
      if (!res.TryGetProperty("ok", out var okProp) || !okProp.GetBoolean())
      {
        Status = "Erreur : mot de passe invalide apr√®s cr√©ation.";
        return;
      }

      IsOpen = true;
      Status = "Vault ouvert. Chargement des entr√©es‚Ä¶";

      // üî• Forcer le DOM √† se mettre √† jour avant JS
      await InvokeAsync(StateHasChanged);
      await Task.Delay(100); // 100 ms pour √™tre s√ªr que le DOM existe

      await ReloadEntries();
    }
    catch (Exception ex)
    {
      Status = "ERR CreateAndOpenVault: " + ex.Message;
    }
  }

  async Task OpenVault()
  {
    Status = "Ouverture‚Ä¶";
    var mp = await JS.InvokeAsync<string>("eval", "document.getElementById('mpOpen')?.value || ''");
    if (VaultId <= 0 || string.IsNullOrWhiteSpace(mp)) { Status = "VaultId et MP requis."; return; }

    var res = (JsonElement)await CryptoJs.OpenVaultAsync(VaultId, mp);
    if (!res.TryGetProperty("ok", out var okProp) || !okProp.GetBoolean())
    {
      Status = "Mot de passe invalide.";
      return;
    }

    IsOpen = true;
    Status = "Vault ouvert.";

    // üî• Attendre que le DOM affiche la liste avant de la remplir
    await InvokeAsync(StateHasChanged);
    await Task.Delay(100);

    await ReloadEntries();
  }

  async Task ReloadEntries()
  {
    var http = HttpFactory.CreateClient();
    var records = await http.GetFromJsonAsync<JsonElement[]>($"{Nav.BaseUri}api/vaults/{VaultId}/entries");
    await CryptoJs.RenderVaultEntriesAsync(records!); // rendu et d√©chiffrement c√¥t√© client
  }

  async Task AddEntry()
  {
    if (!IsOpen) { Status = "Vault ferm√©."; return; }

    var payload = await CryptoJs.EncryptEntryForOpenVaultAsync(); // client-only
    var http = HttpFactory.CreateClient();
    var resp = await http.PostAsJsonAsync($"{Nav.BaseUri}api/vaults/{VaultId}/entries", payload);
    if (!resp.IsSuccessStatusCode) { Status = $"Erreur API: {(int)resp.StatusCode}"; return; }

    await ReloadEntries();
  }

  void CloseVault()
  {
    IsOpen = false;
    Status = "Vault ferm√©.";
    CryptoJs.ClearVaultListAsync();
  }
}