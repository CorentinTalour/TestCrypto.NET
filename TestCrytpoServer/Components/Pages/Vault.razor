@page "/vault"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.Text.Json
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Nav
@inject TestCrytpoServer.Code.CryptoInterop CryptoJs

<h3>Mon Vault</h3>

@if (!IsOpen)
{
  <fieldset style="margin-bottom:1.25rem;">
    <legend>Créer un nouveau vault</legend>
    <div style="margin-bottom:.5rem;">
      <label>OwnerUserId</label><br />
      <input @bind="OwnerUserId" placeholder="ex: user-123" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe maître</label><br />
      <input type="password" @bind="MasterToCreate" placeholder="••••••••" />
    </div>
    <button @onclick="CreateAndOpenVault">Créer & Ouvrir</button>
  </fieldset>

  <fieldset style="margin-bottom:1rem;">
    <legend>Ouvrir un vault existant</legend>
    <div style="margin-bottom:.5rem;">
      <label>Vault Id</label><br />
      <input type="number" @bind="VaultId" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe maître</label><br />
      <input type="password" @bind="MasterToOpen" placeholder="••••••••" />
    </div>
    <button @onclick="OpenVault">Ouvrir</button>
  </fieldset>

  <div><em>@Status</em></div>
}
else
{
  <div style="margin:.5rem 0 1rem;">
    <strong>Vault @VaultId ouvert.</strong>
    <button style="margin-left:1rem" @onclick="CloseVault">Fermer</button>
  </div>

  <fieldset style="margin-bottom:1rem;">
    <legend>Ajouter une entrée</legend>
    <div style="margin-bottom:.5rem;">
      <label>Nom d’utilisateur</label><br />
      <input id="name" @bind="NewName" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Mot de passe</label><br />
      <input id="pwd" @bind="NewPassword" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>URL</label><br />
      <input id="url" @bind="NewUrl" />
    </div>
    <div style="margin-bottom:.5rem;">
      <label>Notes</label><br />
      <textarea id="notes" rows="3" @bind="NewNotes"></textarea>
    </div>
    <button @onclick="AddEntry">Chiffrer & Enregistrer</button>
  </fieldset>

  <h4>Entrées du vault (déchiffrées côté client)</h4>
  @if (DecryptedEntries.Count == 0)
  {
    <p>Aucune entrée.</p>
  }
  else
  {
    <ul>
      @foreach (var e in DecryptedEntries)
      {
        <li style="margin-bottom:.75rem;">
          <div><strong>@e.Name</strong></div>
          <div>Mot de passe : @e.Password</div>
          <div>URL : @e.Url</div>
          <div>Notes : @e.Notes</div>
        </li>
      }
    </ul>
  }

  <div><em>@Status</em></div>
}

@code {
  // Etat
  int VaultId;
  bool IsOpen = false;
  string Status = "";

  // Création/ouverture
  string OwnerUserId = "";
  string MasterToCreate = "";
  string MasterToOpen = "";

  // Saisie nouvelle entrée
  string NewName = "", NewPassword = "", NewUrl = "", NewNotes = "";

  // Liste déchiffrée
  List<EntryVm> DecryptedEntries = new();
  record EntryVm(int Id, string Name, string Password, string Url, string Notes);

  // --- Actions ---

  async Task CreateAndOpenVault()
  {
      try
      {
          Status = "Création du vault…";
          if (string.IsNullOrWhiteSpace(OwnerUserId) || string.IsNullOrWhiteSpace(MasterToCreate))
          { Status = "OwnerUserId et MP requis."; return; }

          // 1) Générer côté client : vaultSaltB64/verifierB64
          var genObj = await CryptoJs.CreateVaultVerifierAsync(MasterToCreate, 600_000);
          var gen = (JsonElement)genObj;
          string vaultSaltB64 = gen.GetProperty("vaultSaltB64").GetString()!;
          int iterations      = gen.GetProperty("iterations").GetInt32();
          string verifierB64  = gen.GetProperty("verifierB64").GetString()!;

          // 2) Créer le vault côté serveur
          var http = HttpFactory.CreateClient();
          var payload = new { ownerUserId = OwnerUserId, vaultSaltB64, iterations, verifierB64 };
          var resp = await http.PostAsJsonAsync($"{Nav.BaseUri}api/vaults", payload);
          if (!resp.IsSuccessStatusCode)
          { Status = $"Erreur API: {(int)resp.StatusCode} {resp.ReasonPhrase}"; return; }

          var body = await resp.Content.ReadFromJsonAsync<JsonElement>();
          VaultId = body.GetProperty("id").GetInt32();

          // 3) Ouvrir immédiatement
          MasterToOpen = MasterToCreate;
          await OpenVault();
      }
      catch (Exception ex) { Status = "ERR CreateAndOpenVault: " + ex.Message; }
  }

  async Task OpenVault()
  {
      try
      {
          Status = "Ouverture…";
          if (VaultId <= 0 || string.IsNullOrWhiteSpace(MasterToOpen))
          { Status = "VaultId et MP requis."; return; }

          // 1) ouvre côté JS (vérifie MP -> importe la clé AES en RAM)
          var res = (JsonElement)await CryptoJs.OpenVaultAsync(VaultId, MasterToOpen);
          if (!res.TryGetProperty("ok", out var okProp) || !okProp.GetBoolean())
          {
              Status = res.TryGetProperty("error", out var e) ? e.GetString() ?? "Erreur" : "Erreur";
              return;
          }

          IsOpen = true;
          Status = "Vault ouvert. Chargement des entrées…";

          // 2) charge & déchiffre
          await ReloadEntries();
      }
      catch (Exception ex) { Status = "ERR OpenVault: " + ex.Message; }
  }

  async Task ReloadEntries()
  {
      try
      {
          var http = HttpFactory.CreateClient();
          var records = await http.GetFromJsonAsync<JsonElement[]>($"{Nav.BaseUri}api/vaults/{VaultId}/entries");
          DecryptedEntries.Clear();

          if (records is null || records.Length == 0) { Status = "Aucune entrée."; StateHasChanged(); return; }

          foreach (var rec in records)
          {
              var dec = await CryptoJs.DecryptVaultEntryAsync(rec);
              DecryptedEntries.Add(new EntryVm(
                  Id: rec.TryGetProperty("id", out var idProp) ? idProp.GetInt32() : 0,
                  Name: dec["name"],
                  Password: dec["password"],
                  Url: dec["url"],
                  Notes: dec["notes"]
              ));
          }

          Status = $"Chargé : {DecryptedEntries.Count} entrée(s).";
      }
      catch (Exception ex) { Status = "ERR ReloadEntries: " + ex.Message; }
      StateHasChanged();
  }

  async Task AddEntry()
  {
      try
      {
          if (!IsOpen) { Status = "Ouvre d'abord le vault."; return; }

          // 1) chiffrer dans le navigateur avec la clé du vault
          var payload = await CryptoJs.EncryptEntryForOpenVaultAsync();

          // 2) envoyer au serveur
          var http = HttpFactory.CreateClient();
          var resp = await http.PostAsJsonAsync($"{Nav.BaseUri}api/vaults/{VaultId}/entries", payload);
          if (!resp.IsSuccessStatusCode)
          { Status = $"Erreur API: {(int)resp.StatusCode} {resp.ReasonPhrase}"; return; }

          // 3) rafraîchir
          await ReloadEntries();

          // 4) reset des champs
          NewName = NewPassword = NewUrl = NewNotes = "";
      }
      catch (Exception ex) { Status = "ERR AddEntry: " + ex.Message; }
  }

  void CloseVault()
  {
      IsOpen = false;
      DecryptedEntries.Clear();
      Status = "Vault fermé.";
  }
}